input {
   
 kafka {
         codec => plain {
            format => "%{message}"
        }
        zk_connect => "PUSH-010:2181,PUSH-012:2181,PUSH-018:2181" # string (optional), default: "localhost:2181"
        group_id => "logstash-susfb" # string (optional), default: "logstash"
        topic_id => "susfb-topic" # string (optional), default: "test"
        reset_beginning => false # boolean (optional), default: false
        consumer_threads => 24 # number (optional), default: 1
        queue_size => 20000 # number (optional), default: 20
        rebalance_max_retries => 4 # number (optional), default: 4
        rebalance_backoff_ms => 2000 # number (optional), default:  2000
        consumer_timeout_ms => -1 # number (optional), default: -1
        consumer_restart_on_error => true # boolean (optional), default: true
        consumer_restart_sleep_ms => 0 # number (optional), default: 0
        decorate_events => true # boolean (optional), default: true
        #consumer_id => "logstash-19" # string (optional) default: nil
        fetch_message_max_bytes => 1048576 # number (optional) default: 1048576
        type => "susfb"
  }
	
}




filter {

ruby {
code => "
event['zzo']=1.chr;
event['deviceId']='unknown';
event['packageId']='unknown';
event['appKey']='unknown';
event['currentVername']='unknown';
event['currentVercode']='unknown';
event['targetVername']='unknown';
event['targetVercode']='unknown';
event['channelKey']='unknown';
event['eventName']='unknown';
event['errorCode']='unknown';
event['logTime']='unknown'"
}

			  json {
				source => "message"
                                #add_tag => [ "xxx" ]
			  }
			  


ruby {
					   code => "require 'socket';event['host_str']=Socket.gethostname;event['myPid']=Process.pid;
						 logtime=Time.parse(event['logTime']);
                                                 event['thedate']=logtime.strftime('%Y%m%d');
                                                 event['new_logtime']=logtime.strftime('%Y%m%d%H%M%S');
						 event['file_time2']=logtime.strftime('%Y-%m-%d');
						 logtime_i=logtime.to_i;event['logtime_str']=logtime_i;
						 event['file_index3']=logtime.hour"
			  }

}





output {

if [type]=="susfb" {      
                file {
                        #tags => ["xxx"]
                        codec => "plain" # codec (optional), default: "plain"
                        flush_interval => 15 # number (optional), default: 2
                        gzip => false # boolean (optional), default: false
                        #message_format => "%{message}"
                        message_format => "%{deviceId}%{zzo}%{packageId}%{zzo}%{currentVername}%{zzo}%{currentVercode}%{zzo}%{targetVername}%{zzo}%{targetVercode}%{zzo}%{channelKey}%{zzo}%{eventName}%{zzo}%{errorCode}%{zzo}%{logTime}"
                        path => "/data/logstash/logstash/data/susfb-%{appKey}-%{host_str}-%{file_time2}-%{file_index3}-%{myPid}" # string (required)
                        workers => 10 # number (optional), default: 1
                  }

}
}
