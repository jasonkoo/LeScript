input {
    kafka {
         codec => plain {
            format => "%{message}"
        }
        zk_connect => "PUSH-010:2181,PUSH-012:2181,PUSH-018:2181" # string (optional), default: "localhost:2181"
        group_id => "logstash-appinfo" # string (optional), default: "logstash"
        topic_id => "appinfo-topic" # string (optional), default: "test"
        reset_beginning => false # boolean (optional), default: false
        consumer_threads => 12 # number (optional), default: 1
        queue_size => 20000 # number (optional), default: 20
        rebalance_max_retries => 4 # number (optional), default: 4
        rebalance_backoff_ms => 2000 # number (optional), default:  2000
        consumer_timeout_ms => -1 # number (optional), default: -1
        consumer_restart_on_error => true # boolean (optional), default: true
        consumer_restart_sleep_ms => 0 # number (optional), default: 0
        decorate_events => true # boolean (optional), default: true
        #consumer_id => "logstash-19" # string (optional) default: nil
        fetch_message_max_bytes => 1048576 # number (optional) default: 1048576
        type => "appinfo"
  }

 kafka {
         codec => plain {
            format => "%{message}"
        }
        zk_connect => "PUSH-010:2181,PUSH-012:2181,PUSH-018:2181" # string (optional), default: "localhost:2181"
        group_id => "logstash-appfeedback" # string (optional), default: "logstash"
        topic_id => "appfeedback-topic" # string (optional), default: "test"
        reset_beginning => false # boolean (optional), default: false
        consumer_threads => 12 # number (optional), default: 1
        queue_size => 20000 # number (optional), default: 20
        rebalance_max_retries => 4 # number (optional), default: 4
        rebalance_backoff_ms => 2000 # number (optional), default:  2000
        consumer_timeout_ms => -1 # number (optional), default: -1
        consumer_restart_on_error => true # boolean (optional), default: true
        consumer_restart_sleep_ms => 0 # number (optional), default: 0
        decorate_events => true # boolean (optional), default: true
        #consumer_id => "logstash-19" # string (optional) default: nil
        fetch_message_max_bytes => 1048576 # number (optional) default: 1048576
        type => "appfeedback"
  }
	
}




filter {

ruby {
code => "
event['zzo']=1.chr;
event['sid']='unknown';
event['appPkgName']='unknown';
event['appVerName']='unknown';
event['appVerCode']='unknown';   
event['pid']='unknown';
event['cityName']='unknown';
event['countryCode']='unknown';
event['deviceModel']='unknown';
event['deviceId']='unknown';
event['deviceModel']='unknown';
event['ip']='unknown';
event['osVersion']='unknown';
event['pePkgName']='unknown';
event['peVerCode']='unknown';
event['peVersion']='unknown';
event['eventName']='unknown';
event['pePollVersion']='unknown'"
}

			  json {
				source => "message"
                                #add_tag => [ "xxx" ]
			  }
			  


ruby {
					   code => "require 'socket';event['host_str']=Socket.gethostname;event['myPid']=Process.pid;
						 logtime=Time.parse(event['logTime']);
                                                 event['thedate']=logtime.strftime('%Y%m%d');
                                                 event['new_logtime']=logtime.strftime('%Y%m%d%H%M%S');
						 event['file_time2']=logtime.strftime('%Y-%m-%d');
						 logtime_i=logtime.to_i;event['logtime_str']=logtime_i;
						 event['file_index3']=logtime.hour"
			  }

}





output {

if [type]=="appinfo" {

		file {
                        #tags => ["xxx"]
			codec => "plain" # codec (optional), default: "plain"
			flush_interval => 15 # number (optional), default: 2
			gzip => false # boolean (optional), default: false
			#message_format => "%{message}"
                        message_format =>"%{appPkgName}%{zzo}%{appVerName}%{zzo}%{appVerCode}%{zzo}%{new_logtime}%{zzo}%{pid}%{zzo}%{cityName}%{zzo}%{countryCode}%{zzo}%{deviceModel}%{zzo}%{deviceId}%{zzo}%{deviceIdType}%{zzo}%{ip}%{zzo}%{osVersion}%{zzo}%{pePkgName}%{zzo}%{peVerCode}%{zzo}%{peVersion}%{zzo}%{pePollVersion}"
			path => "/data/logstash/logstash/data/appinfo-%{sid}-%{host_str}-%{file_time2}-%{file_index3}-%{myPid}" # string (required)
			workers => 10 # number (optional), default: 1
		  }
}
if [type]=="appfeedback" {
       if [success] {
                file {
                        #tags => ["xxx"]
                        codec => "plain" # codec (optional), default: "plain"
                        flush_interval => 15 # number (optional), default: 2
                        gzip => false # boolean (optional), default: false
                        #message_format => "%{message}"
                        message_format => "%{adId}%{zzo}%{eventName}%{zzo}%{new_logtime}%{zzo}%{pid}%{zzo}%{cityName}%{zzo}%{countryCode}%{zzo}%{deviceModel}%{zzo}%{deviceId}"
                        path => "/data/logstash/logstash/data/appfb-%{sid}-%{host_str}-%{file_time2}-%{file_index3}-%{myPid}" # string (required)
                        workers => 10 # number (optional), default: 1
                  }
} else {
 file {
                        #tags => ["xxx"]
                        codec => "plain" # codec (optional), default: "plain"
                        flush_interval => 15 # number (optional), default: 2
                        gzip => false # boolean (optional), default: false
                        #message_format => "%{message}"
                        message_format => "%{adId}%{zzo}%{eventName}%{zzo}%{errCode}%{zzo}%{new_logtime}%{zzo}%{pid}%{zzo}%{cityName}%{zzo}%{countryCode}%{zzo}%{deviceModel}%{zzo}%{deviceId}"
                        path => "/data/logstash/logstash/data/apperror-%{sid}-%{host_str}-%{file_time2}-%{file_index3}-%{myPid}" # string (required)
                        workers => 10 # number (optional), default: 1
                  }
}

}
}
