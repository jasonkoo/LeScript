# Specify server locations in a SOLR_LOCATOR variable; used later in variable substitutions:
SOLR_DEVICE_DOMESTIC : {
  # Name of solr collection
  collection : device_domestic
  # ZooKeeper ensemble
  zkHost : "$ZK_HOST"
  # The maximum number of documents to send to Solr per network batch (throughput knob)
  batchSize : 1000
}
SOLR_DEVICE_OVERSEAS : {
  # Name of solr collection
  collection : device_overseas
  # ZooKeeper ensemble
  zkHost : "$ZK_HOST"
  # The maximum number of documents to send to Solr per network batch (throughput knob)
  batchSize : 1000
}


# Specify an array of one or more morphlines, each of which defines an ETL 
# transformation chain. A morphline consists of one or more (potentially 
# nested) commands. A morphline is a way to consume records (e.g. Flume events, 
# HDFS files or blocks), turn them into a stream of records, and pipe the stream 
# of records through a set of easily configurable transformations on it's way to 
# Solr (or a MapReduceIndexerTool RecordWriter that feeds via a Reducer into Solr).
morphlines : [
  {
    # Name used to identify a morphline. E.g. used if there are multiple morphlines in a morphline config file
    id : device_domestic_realtime
    
    # Import all morphline commands in these java packages and their subpackages.
    # Other commands that may be present on the classpath are not visible to this morphline.
    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**"]
    
    commands : [                    
      { 
        # Parse csv
        readCSV {
          separator : "\u0001"
          columns : [dbtbl,updatetime,id,devicemodel,countrycode,cityname,peversion,pevercode,tagstmp]
          ignoreFirstLine : false
          quoteChar : ""
          commentPrefix : ""
          trim : true
          charset : UTF-8
        }
      }
      {
        # convert the timestamp field to "yyyy-MM-dd'T'HH:mm:ssZ"
        # The input may match "yyyyMMdd HH:mm:ss".
        convertTimestamp {
          field : updatetime
          inputFormats : ["yyyyMMdd HH:mm:ss"]
          inputTimezone : Asia/Shanghai
          outputFormat : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          outputTimezone : Asia/Shanghai
        }    
      }
                  
      {
        split { 
          inputField : tagstmp
          outputField : tags          
          separator : ","        
          isRegex : false        
          addEmptyStrings : false
          trim : true          
        }
      }

      # log the record at DEBUG level to SLF4J
      { logDebug { format : "output record: {}", args : ["@{}"] } }    
      
      {
        sanitizeUnknownSolrFields {
        # Location from which to fetch Solr schema
          solrLocator : ${SOLR_DEVICE_DOMESTIC}
          # renameToPrefix : "ignored_"
        }
      }
      {
        loadSolr {
          solrLocator : ${SOLR_DEVICE_DOMESTIC}
        }
      }
    ]
  }
  {
    # Name used to identify a morphline. E.g. used if there are multiple morphlines in a morphline config file
    id : device_overseas_realtime
    
    # Import all morphline commands in these java packages and their subpackages.
    # Other commands that may be present on the classpath are not visible to this morphline.
    importCommands : ["org.kitesdk.morphline.**", "org.apache.solr.**"]
    
    commands : [                    
      { 
        # Parse csv
        readCSV {
          separator : "\u0001"
          columns : [dbtbl,updatetime,id,devicemodel,countrycode,cityname,peversion,pevercode,tagstmp]
          ignoreFirstLine : false
          quoteChar : ""
          commentPrefix : ""
          trim : true
          charset : UTF-8
        }
      }
      {
        # convert the timestamp field to "yyyy-MM-dd'T'HH:mm:ssZ"
        # The input may match "yyyyMMdd HH:mm:ss".
        convertTimestamp {
          field : updatetime
          inputFormats : ["yyyyMMdd HH:mm:ss"]
          inputTimezone : Asia/Shanghai
          outputFormat : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          outputTimezone : Asia/Shanghai
        }    
      }
                  
      {
        split { 
          inputField : tagstmp
          outputField : tags          
          separator : ","        
          isRegex : false        
          addEmptyStrings : false
          trim : true          
        }
      }

      # log the record at DEBUG level to SLF4J
      { logDebug { format : "output record: {}", args : ["@{}"] } }    
      
      {
        sanitizeUnknownSolrFields {
        # Location from which to fetch Solr schema
          solrLocator : ${SOLR_DEVICE_OVERSEAS}
          # renameToPrefix : "ignored_"
        }
      }
      {
        loadSolr {
          solrLocator : ${SOLR_DEVICE_OVERSEAS}
        }
      }
    ]
  }
]